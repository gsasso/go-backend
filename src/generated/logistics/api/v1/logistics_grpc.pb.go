// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/logistics.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoopLogisticsEngineAPI_MoveUnit_FullMethodName             = "/coopnorge.logistics.api.v1.CoopLogisticsEngineAPI/MoveUnit"
	CoopLogisticsEngineAPI_UnitReachedWarehouse_FullMethodName = "/coopnorge.logistics.api.v1.CoopLogisticsEngineAPI/UnitReachedWarehouse"
)

// CoopLogisticsEngineAPIClient is the client API for CoopLogisticsEngineAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoopLogisticsEngineAPIClient interface {
	// MoveUnit request will be send when unit moves in dimensions to new location.
	MoveUnit(ctx context.Context, in *MoveUnitRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	// UnitReachedWarehouse reports when unit reached warehouse to do something there.
	UnitReachedWarehouse(ctx context.Context, in *UnitReachedWarehouseRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
}

type coopLogisticsEngineAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoopLogisticsEngineAPIClient(cc grpc.ClientConnInterface) CoopLogisticsEngineAPIClient {
	return &coopLogisticsEngineAPIClient{cc}
}

func (c *coopLogisticsEngineAPIClient) MoveUnit(ctx context.Context, in *MoveUnitRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, CoopLogisticsEngineAPI_MoveUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coopLogisticsEngineAPIClient) UnitReachedWarehouse(ctx context.Context, in *UnitReachedWarehouseRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, CoopLogisticsEngineAPI_UnitReachedWarehouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoopLogisticsEngineAPIServer is the server API for CoopLogisticsEngineAPI service.
// All implementations must embed UnimplementedCoopLogisticsEngineAPIServer
// for forward compatibility
type CoopLogisticsEngineAPIServer interface {
	// MoveUnit request will be send when unit moves in dimensions to new location.
	MoveUnit(context.Context, *MoveUnitRequest) (*DefaultResponse, error)
	// UnitReachedWarehouse reports when unit reached warehouse to do something there.
	UnitReachedWarehouse(context.Context, *UnitReachedWarehouseRequest) (*DefaultResponse, error)
	mustEmbedUnimplementedCoopLogisticsEngineAPIServer()
}

// UnimplementedCoopLogisticsEngineAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCoopLogisticsEngineAPIServer struct {
}

func (UnimplementedCoopLogisticsEngineAPIServer) MoveUnit(context.Context, *MoveUnitRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveUnit not implemented")
}
func (UnimplementedCoopLogisticsEngineAPIServer) UnitReachedWarehouse(context.Context, *UnitReachedWarehouseRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitReachedWarehouse not implemented")
}
func (UnimplementedCoopLogisticsEngineAPIServer) mustEmbedUnimplementedCoopLogisticsEngineAPIServer() {
}

// UnsafeCoopLogisticsEngineAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoopLogisticsEngineAPIServer will
// result in compilation errors.
type UnsafeCoopLogisticsEngineAPIServer interface {
	mustEmbedUnimplementedCoopLogisticsEngineAPIServer()
}

func RegisterCoopLogisticsEngineAPIServer(s grpc.ServiceRegistrar, srv CoopLogisticsEngineAPIServer) {
	s.RegisterService(&CoopLogisticsEngineAPI_ServiceDesc, srv)
}

func _CoopLogisticsEngineAPI_MoveUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoopLogisticsEngineAPIServer).MoveUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoopLogisticsEngineAPI_MoveUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoopLogisticsEngineAPIServer).MoveUnit(ctx, req.(*MoveUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoopLogisticsEngineAPI_UnitReachedWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitReachedWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoopLogisticsEngineAPIServer).UnitReachedWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoopLogisticsEngineAPI_UnitReachedWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoopLogisticsEngineAPIServer).UnitReachedWarehouse(ctx, req.(*UnitReachedWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoopLogisticsEngineAPI_ServiceDesc is the grpc.ServiceDesc for CoopLogisticsEngineAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoopLogisticsEngineAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coopnorge.logistics.api.v1.CoopLogisticsEngineAPI",
	HandlerType: (*CoopLogisticsEngineAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoveUnit",
			Handler:    _CoopLogisticsEngineAPI_MoveUnit_Handler,
		},
		{
			MethodName: "UnitReachedWarehouse",
			Handler:    _CoopLogisticsEngineAPI_UnitReachedWarehouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/logistics.proto",
}
